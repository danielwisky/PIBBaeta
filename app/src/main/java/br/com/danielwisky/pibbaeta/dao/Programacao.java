package br.com.danielwisky.pibbaeta.dao;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.NotNull;
import org.greenrobot.greendao.annotation.ToOne;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PROGRAMACAO".
 */
@Entity(active = true)
@JsonIgnoreProperties(ignoreUnknown = true)
public class Programacao {

  @Id
  private Long id;

  @NotNull
  private String titulo;

  @NotNull
  private String descricao;

  @NotNull
  private java.util.Date dataInicio;

  @NotNull
  private java.util.Date dataTermino;

  @NotNull
  private String local;
  private String endereco;
  private String urlBanner;
  private Long tipoProgramacaoId;

  /** Used to resolve relations */
  @Generated(hash = 2040040024)
  private transient DaoSession daoSession;

  /** Used for active entity operations. */
  @Generated(hash = 1250016352)
  private transient ProgramacaoDao myDao;

  @ToOne(joinProperty = "tipoProgramacaoId")
  private TipoProgramacao tipoProgramacao;

  @Generated(hash = 1336252720)
  private transient Long tipoProgramacao__resolvedKey;

  

  // KEEP FIELDS - put your custom fields here
  // KEEP FIELDS END

  @Generated(hash = 2057270027)
  public Programacao() {
  }

  public Programacao(Long id) {
    this.id = id;
  }

  @Generated(hash = 534643418)
  public Programacao(Long id, @NotNull String titulo, @NotNull String descricao,
          @NotNull java.util.Date dataInicio, @NotNull java.util.Date dataTermino, @NotNull String local,
          String endereco, String urlBanner, Long tipoProgramacaoId) {
      this.id = id;
      this.titulo = titulo;
      this.descricao = descricao;
      this.dataInicio = dataInicio;
      this.dataTermino = dataTermino;
      this.local = local;
      this.endereco = endereco;
      this.urlBanner = urlBanner;
      this.tipoProgramacaoId = tipoProgramacaoId;
  }

  /** called by internal mechanisms, do not call yourself. */
  @Generated(hash = 1250199930)
  public void __setDaoSession(DaoSession daoSession) {
      this.daoSession = daoSession;
      myDao = daoSession != null ? daoSession.getProgramacaoDao() : null;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  @NotNull
  public String getTitulo() {
    return titulo;
  }

  /**
   * Not-null value; ensure this value is available before it is saved to the database.
   */
  public void setTitulo(@NotNull String titulo) {
    this.titulo = titulo;
  }

  @NotNull
  public String getDescricao() {
    return descricao;
  }

  /**
   * Not-null value; ensure this value is available before it is saved to the database.
   */
  public void setDescricao(@NotNull String descricao) {
    this.descricao = descricao;
  }

  @NotNull
  public java.util.Date getDataInicio() {
    return dataInicio;
  }

  /**
   * Not-null value; ensure this value is available before it is saved to the database.
   */
  public void setDataInicio(@NotNull java.util.Date dataInicio) {
    this.dataInicio = dataInicio;
  }

  @NotNull
  public java.util.Date getDataTermino() {
    return dataTermino;
  }

  /**
   * Not-null value; ensure this value is available before it is saved to the database.
   */
  public void setDataTermino(@NotNull java.util.Date dataTermino) {
    this.dataTermino = dataTermino;
  }

  @NotNull
  public String getLocal() {
    return local;
  }

  /**
   * Not-null value; ensure this value is available before it is saved to the database.
   */
  public void setLocal(@NotNull String local) {
    this.local = local;
  }

  public String getEndereco() {
    return endereco;
  }

  public void setEndereco(String endereco) {
    this.endereco = endereco;
  }

  public String getUrlBanner() {
    return urlBanner;
  }

  public void setUrlBanner(String urlBanner) {
    this.urlBanner = urlBanner;
  }

  public Long getTipoProgramacaoId() {
    return tipoProgramacaoId;
  }

  public void setTipoProgramacaoId(Long tipoProgramacaoId) {
    this.tipoProgramacaoId = tipoProgramacaoId;
  }

  /** To-one relationship, resolved on first access. */
  @Generated(hash = 1498973905)
  public TipoProgramacao getTipoProgramacao() {
      Long __key = this.tipoProgramacaoId;
      if (tipoProgramacao__resolvedKey == null || !tipoProgramacao__resolvedKey.equals(__key)) {
          final DaoSession daoSession = this.daoSession;
          if (daoSession == null) {
              throw new DaoException("Entity is detached from DAO context");
          }
          TipoProgramacaoDao targetDao = daoSession.getTipoProgramacaoDao();
          TipoProgramacao tipoProgramacaoNew = targetDao.load(__key);
          synchronized (this) {
              tipoProgramacao = tipoProgramacaoNew;
              tipoProgramacao__resolvedKey = __key;
          }
      }
      return tipoProgramacao;
  }

  /** called by internal mechanisms, do not call yourself. */
  @Generated(hash = 1768163732)
  public void setTipoProgramacao(TipoProgramacao tipoProgramacao) {
      synchronized (this) {
          this.tipoProgramacao = tipoProgramacao;
          tipoProgramacaoId = tipoProgramacao == null ? null : tipoProgramacao.getId();
          tipoProgramacao__resolvedKey = tipoProgramacaoId;
      }
  }

  /**
   * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
   * Entity must attached to an entity context.
   */
  @Generated(hash = 128553479)
  public void delete() {
      if (myDao == null) {
          throw new DaoException("Entity is detached from DAO context");
      }
      myDao.delete(this);
  }

  /**
   * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
   * Entity must attached to an entity context.
   */
  @Generated(hash = 713229351)
  public void update() {
      if (myDao == null) {
          throw new DaoException("Entity is detached from DAO context");
      }
      myDao.update(this);
  }

  /**
   * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
   * Entity must attached to an entity context.
   */
  @Generated(hash = 1942392019)
  public void refresh() {
      if (myDao == null) {
          throw new DaoException("Entity is detached from DAO context");
      }
      myDao.refresh(this);
  }

  // KEEP METHODS - put your custom methods here
  // KEEP METHODS END

}

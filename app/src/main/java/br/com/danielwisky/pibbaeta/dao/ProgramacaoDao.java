package br.com.danielwisky.pibbaeta.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAMACAO".
*/
public class ProgramacaoDao extends AbstractDao<Programacao, Long> {

    public static final String TABLENAME = "PROGRAMACAO";

    /**
     * Properties of entity Programacao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titulo = new Property(1, String.class, "titulo", false, "TITULO");
        public final static Property Descricao = new Property(2, String.class, "descricao", false, "DESCRICAO");
        public final static Property Tipo = new Property(3, String.class, "tipo", false, "TIPO");
        public final static Property DataInicio = new Property(4, java.util.Date.class, "dataInicio", false, "DATA_INICIO");
        public final static Property DataTermino = new Property(5, java.util.Date.class, "dataTermino", false, "DATA_TERMINO");
        public final static Property Local = new Property(6, String.class, "local", false, "LOCAL");
        public final static Property Endereco = new Property(7, String.class, "endereco", false, "ENDERECO");
        public final static Property UrlBanner = new Property(8, String.class, "urlBanner", false, "URL_BANNER");
        public final static Property Observacao = new Property(9, String.class, "observacao", false, "OBSERVACAO");
        public final static Property IdExterno = new Property(10, String.class, "idExterno", false, "ID_EXTERNO");
    }


    public ProgramacaoDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramacaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAMACAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITULO\" TEXT NOT NULL ," + // 1: titulo
                "\"DESCRICAO\" TEXT NOT NULL ," + // 2: descricao
                "\"TIPO\" TEXT NOT NULL ," + // 3: tipo
                "\"DATA_INICIO\" INTEGER NOT NULL ," + // 4: dataInicio
                "\"DATA_TERMINO\" INTEGER NOT NULL ," + // 5: dataTermino
                "\"LOCAL\" TEXT NOT NULL ," + // 6: local
                "\"ENDERECO\" TEXT," + // 7: endereco
                "\"URL_BANNER\" TEXT," + // 8: urlBanner
                "\"OBSERVACAO\" TEXT," + // 9: observacao
                "\"ID_EXTERNO\" TEXT);"); // 10: idExterno
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PROGRAMACAO_ID_EXTERNO ON \"PROGRAMACAO\"" +
                " (\"ID_EXTERNO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAMACAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Programacao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitulo());
        stmt.bindString(3, entity.getDescricao());
        stmt.bindString(4, entity.getTipo());
        stmt.bindLong(5, entity.getDataInicio().getTime());
        stmt.bindLong(6, entity.getDataTermino().getTime());
        stmt.bindString(7, entity.getLocal());
 
        String endereco = entity.getEndereco();
        if (endereco != null) {
            stmt.bindString(8, endereco);
        }
 
        String urlBanner = entity.getUrlBanner();
        if (urlBanner != null) {
            stmt.bindString(9, urlBanner);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(10, observacao);
        }
 
        String idExterno = entity.getIdExterno();
        if (idExterno != null) {
            stmt.bindString(11, idExterno);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Programacao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitulo());
        stmt.bindString(3, entity.getDescricao());
        stmt.bindString(4, entity.getTipo());
        stmt.bindLong(5, entity.getDataInicio().getTime());
        stmt.bindLong(6, entity.getDataTermino().getTime());
        stmt.bindString(7, entity.getLocal());
 
        String endereco = entity.getEndereco();
        if (endereco != null) {
            stmt.bindString(8, endereco);
        }
 
        String urlBanner = entity.getUrlBanner();
        if (urlBanner != null) {
            stmt.bindString(9, urlBanner);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(10, observacao);
        }
 
        String idExterno = entity.getIdExterno();
        if (idExterno != null) {
            stmt.bindString(11, idExterno);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Programacao readEntity(Cursor cursor, int offset) {
        Programacao entity = new Programacao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // titulo
            cursor.getString(offset + 2), // descricao
            cursor.getString(offset + 3), // tipo
            new java.util.Date(cursor.getLong(offset + 4)), // dataInicio
            new java.util.Date(cursor.getLong(offset + 5)), // dataTermino
            cursor.getString(offset + 6), // local
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // endereco
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // urlBanner
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // observacao
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // idExterno
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Programacao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitulo(cursor.getString(offset + 1));
        entity.setDescricao(cursor.getString(offset + 2));
        entity.setTipo(cursor.getString(offset + 3));
        entity.setDataInicio(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDataTermino(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setLocal(cursor.getString(offset + 6));
        entity.setEndereco(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrlBanner(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setObservacao(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdExterno(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Programacao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Programacao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Programacao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package br.com.danielwisky.pibbaeta.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAMACAO".
*/
public class ProgramacaoDao extends AbstractDao<Programacao, Long> {

    public static final String TABLENAME = "PROGRAMACAO";

    /**
     * Properties of entity Programacao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Titulo = new Property(1, String.class, "titulo", false, "TITULO");
        public final static Property Descricao = new Property(2, String.class, "descricao", false, "DESCRICAO");
        public final static Property DataInicio = new Property(3, java.util.Date.class, "dataInicio", false, "DATA_INICIO");
        public final static Property DataTermino = new Property(4, java.util.Date.class, "dataTermino", false, "DATA_TERMINO");
        public final static Property Local = new Property(5, String.class, "local", false, "LOCAL");
        public final static Property Endereco = new Property(6, String.class, "endereco", false, "ENDERECO");
        public final static Property UrlBanner = new Property(7, String.class, "urlBanner", false, "URL_BANNER");
        public final static Property TipoProgramacaoId = new Property(8, Long.class, "tipoProgramacaoId", false, "TIPO_PROGRAMACAO_ID");
    }

    private DaoSession daoSession;


    public ProgramacaoDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramacaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAMACAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITULO\" TEXT NOT NULL ," + // 1: titulo
                "\"DESCRICAO\" TEXT NOT NULL ," + // 2: descricao
                "\"DATA_INICIO\" INTEGER NOT NULL ," + // 3: dataInicio
                "\"DATA_TERMINO\" INTEGER NOT NULL ," + // 4: dataTermino
                "\"LOCAL\" TEXT NOT NULL ," + // 5: local
                "\"ENDERECO\" TEXT," + // 6: endereco
                "\"URL_BANNER\" TEXT," + // 7: urlBanner
                "\"TIPO_PROGRAMACAO_ID\" INTEGER);"); // 8: tipoProgramacaoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAMACAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Programacao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitulo());
        stmt.bindString(3, entity.getDescricao());
        stmt.bindLong(4, entity.getDataInicio().getTime());
        stmt.bindLong(5, entity.getDataTermino().getTime());
        stmt.bindString(6, entity.getLocal());
 
        String endereco = entity.getEndereco();
        if (endereco != null) {
            stmt.bindString(7, endereco);
        }
 
        String urlBanner = entity.getUrlBanner();
        if (urlBanner != null) {
            stmt.bindString(8, urlBanner);
        }
 
        Long tipoProgramacaoId = entity.getTipoProgramacaoId();
        if (tipoProgramacaoId != null) {
            stmt.bindLong(9, tipoProgramacaoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Programacao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitulo());
        stmt.bindString(3, entity.getDescricao());
        stmt.bindLong(4, entity.getDataInicio().getTime());
        stmt.bindLong(5, entity.getDataTermino().getTime());
        stmt.bindString(6, entity.getLocal());
 
        String endereco = entity.getEndereco();
        if (endereco != null) {
            stmt.bindString(7, endereco);
        }
 
        String urlBanner = entity.getUrlBanner();
        if (urlBanner != null) {
            stmt.bindString(8, urlBanner);
        }
 
        Long tipoProgramacaoId = entity.getTipoProgramacaoId();
        if (tipoProgramacaoId != null) {
            stmt.bindLong(9, tipoProgramacaoId);
        }
    }

    @Override
    protected final void attachEntity(Programacao entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Programacao readEntity(Cursor cursor, int offset) {
        Programacao entity = new Programacao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // titulo
            cursor.getString(offset + 2), // descricao
            new java.util.Date(cursor.getLong(offset + 3)), // dataInicio
            new java.util.Date(cursor.getLong(offset + 4)), // dataTermino
            cursor.getString(offset + 5), // local
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endereco
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // urlBanner
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // tipoProgramacaoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Programacao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitulo(cursor.getString(offset + 1));
        entity.setDescricao(cursor.getString(offset + 2));
        entity.setDataInicio(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDataTermino(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setLocal(cursor.getString(offset + 5));
        entity.setEndereco(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrlBanner(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTipoProgramacaoId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Programacao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Programacao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Programacao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTipoProgramacaoDao().getAllColumns());
            builder.append(" FROM PROGRAMACAO T");
            builder.append(" LEFT JOIN TIPO_PROGRAMACAO T0 ON T.\"TIPO_PROGRAMACAO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Programacao loadCurrentDeep(Cursor cursor, boolean lock) {
        Programacao entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TipoProgramacao tipoProgramacao = loadCurrentOther(daoSession.getTipoProgramacaoDao(), cursor, offset);
        entity.setTipoProgramacao(tipoProgramacao);

        return entity;    
    }

    public Programacao loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Programacao> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Programacao> list = new ArrayList<Programacao>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Programacao> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Programacao> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package br.com.danielwisky.pibbaeta.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FEEDBACK".
 */
public class FeedbackDao extends AbstractDao<Feedback, Long> {

  public static final String TABLENAME = "FEEDBACK";

  /**
   * Properties of entity Feedback.<br/>
   * Can be used for QueryBuilder and for referencing column names.
   */
  public static class Properties {

    public final static Property Id = new Property(0, Long.class, "id", true, "_id");
    public final static Property Descricao = new Property(1, String.class, "descricao", false, "DESCRICAO");
  }

  public FeedbackDao(DaoConfig config) {
    super(config);
  }

  public FeedbackDao(DaoConfig config, DaoSession daoSession) {
    super(config, daoSession);
  }

  /**
   * Creates the underlying database table.
   */
  public static void createTable(Database db, boolean ifNotExists) {
    String constraint = ifNotExists ? "IF NOT EXISTS " : "";
    db.execSQL("CREATE TABLE " + constraint + "\"FEEDBACK\" (" + //
        "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
        "\"DESCRICAO\" TEXT NOT NULL );"); // 1: descricao
  }

  /**
   * Drops the underlying database table.
   */
  public static void dropTable(Database db, boolean ifExists) {
    String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FEEDBACK\"";
    db.execSQL(sql);
  }

  @Override
  protected final void bindValues(DatabaseStatement stmt, Feedback entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }
    stmt.bindString(2, entity.getDescricao());
  }

  @Override
  protected final void bindValues(SQLiteStatement stmt, Feedback entity) {
    stmt.clearBindings();

    Long id = entity.getId();
    if (id != null) {
      stmt.bindLong(1, id);
    }
    stmt.bindString(2, entity.getDescricao());
  }

  @Override
  public Long readKey(Cursor cursor, int offset) {
    return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
  }

  @Override
  public Feedback readEntity(Cursor cursor, int offset) {
    Feedback entity = new Feedback( //
        cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
        cursor.getString(offset + 1) // descricao
    );
    return entity;
  }

  @Override
  public void readEntity(Cursor cursor, Feedback entity, int offset) {
    entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
    entity.setDescricao(cursor.getString(offset + 1));
  }

  @Override
  protected final Long updateKeyAfterInsert(Feedback entity, long rowId) {
    entity.setId(rowId);
    return rowId;
  }

  @Override
  public Long getKey(Feedback entity) {
    if (entity != null) {
      return entity.getId();
    } else {
      return null;
    }
  }

  @Override
  public boolean hasKey(Feedback entity) {
    return entity.getId() != null;
  }

  @Override
  protected final boolean isEntityUpdateable() {
    return true;
  }

}
